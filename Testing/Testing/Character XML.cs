//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using AssemblyCSharp;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.IO;
using System.Xml;

namespace Testing
{
	[TestFixture()]
	public class Character_XML
	{
		private Character CreateNewCharacter()
		{
			List<Race> races = new List<Race>();
			races.Add(new Race(RaceTypes.Human));
			
			List<CharClass> charClasses = new List<CharClass>();
			charClasses.Add(new CharClass(CharacterClass.Warrior));
			
			Character newChar = new Character("Test Dude", Sexes.Male, races, charClasses);
			return newChar;
		}


		private Weapon CreateWeaponSword(EffectTypes effectType, AttributeTypes attributeTypes, int value, string name)
		{
			List<Effect> effects = new List<Effect>();
			
			Effect tempEffect = new Effect(effectType, attributeTypes, value);
			effects.Add(tempEffect);
			
			return new Weapon(6, WeaponTypes.Sword, Handedness.Single, DamageTypes.Slashing, name, ItemTypes.Weapon, MaterialTypes.Steel, 400, effects);
		}



		private Item CreateArmor()
		{
			List<Effect> effects = new List<Effect>();
			Armour newArmor = new Armour(ArmorClasses.Medium, WornPosition.Head, "Standard Helmet", ItemTypes.Armour, MaterialTypes.Leather, 1000, effects);
			return newArmor;
		}
		
		private Item CreateWeapon()
		{
			List<Effect> effects = new List<Effect>();
			Weapon wep = new Weapon(6, WeaponTypes.Bow, Handedness.Two, DamageTypes.Peircing, "Standard Bow", ItemTypes.Weapon, MaterialTypes.Wood, 400, effects);
			return wep;
		}
		
		private Item CreateJewellry()
		{
			List<Effect> effects = new List<Effect>();
			Jewellry jewellry = new Jewellry(JewellryTypes.Ring, "Ring", ItemTypes.Jewellry, MaterialTypes.Copper, 30, effects);
			return jewellry;
		}

		[Test()]
		public void SaveAndLoadBasicChar ()
		{
			Character newChar = CreateNewCharacter();

			XMLHandler.SaveCharacter(newChar);

			Character testChar = XMLHandler.LoadCharacter(newChar.Name);
			
			Assert.AreEqual(newChar.Name, testChar.Name);
			Assert.AreEqual(newChar.Sex, testChar.Sex);

			for(int i = 0; i < newChar.baseAttributes.Count; i++)
			{
				AssemblyCSharp.Attribute newAttr = newChar.baseAttributes[i];
				AssemblyCSharp.Attribute testAttr = testChar.baseAttributes[i];
				Assert.AreEqual(newAttr.AttributeName, testAttr.AttributeName);
			}

			for(int i = 0; i < newChar.addedAttributes.Count; i++)
			{
				AssemblyCSharp.Attribute newAttr = newChar.addedAttributes[i];
				AssemblyCSharp.Attribute testAttr = testChar.addedAttributes[i];
				Assert.AreEqual(newAttr.AttributeName, testAttr.AttributeName);
			}

			for(int i = 0; i < newChar.totalAttributes.Count; i++)
			{
				AssemblyCSharp.Attribute newAttr = newChar.totalAttributes[i];
				AssemblyCSharp.Attribute testAttr = testChar.totalAttributes[i];
				Assert.AreEqual(newAttr.AttributeName, testAttr.AttributeName);
			}

			for(int i = 0; i < newChar.races.Count; i++)
			{
				Race newRace = newChar.races[i];
				Race testRace = testChar.races[i];
				Assert.AreEqual(newRace.RaceType, testRace.RaceType);
			}
		}
	}
}

