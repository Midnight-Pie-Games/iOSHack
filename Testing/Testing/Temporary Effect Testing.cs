//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using System.Collections.Generic;
using AssemblyCSharp;

namespace Testing
{
	[TestFixture()]
	public class Temporary_Effect_Testing
	{

		private Character CreateNewCharacter()
		{
			List<Race> races = new List<Race>();
			races.Add(new Race(RaceTypes.Human));
			
			List<CharClass> charClasses = new List<CharClass>();
			charClasses.Add(new CharClass(CharacterClass.Warrior));
			
			Character newChar = new Character("Test Dude", Sexes.Male, races, charClasses);
			return newChar;
		}

		[Test()]
		public void TestTemporaryEffectIncreaseSword()
		{
			Character newChar = CreateNewCharacter();
			//EffectTypes effectType, int rounds
			newChar.AddAttribute(new AssemblyCSharp.Attribute(AttributeTypes.Swords, 1));

			Effect temp = new Effect(EffectTypes.Strengthen, AttributeTypes.Swords, 1);
			newChar.AddTemporaryEffect(temp);

			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(1, newChar.temporaryEffects[0].EffectValue);
			Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
		}


		[Test()]
		public void TestRemoveTemporaryAfterMove()
		{
			Character newChar = CreateNewCharacter();
			//EffectTypes effectType, int rounds
			newChar.AddAttribute(new AssemblyCSharp.Attribute(AttributeTypes.Swords, 1));
			
			Effect temp = new Effect(EffectTypes.Strengthen, AttributeTypes.Swords, 1, 1);
			newChar.AddTemporaryEffect(temp);
			
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(1, newChar.temporaryEffects[0].EffectValue);
			Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));

			newChar.CharacterMove();

			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.temporaryEffects.Count);
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
		}


		[Test()]
		public void TestRemoveTemporaryAfterMove2()
		{
			Character newChar = CreateNewCharacter();
			//EffectTypes effectType, int rounds
			newChar.AddAttribute(new AssemblyCSharp.Attribute(AttributeTypes.Swords, 1));

			int rounds = 10;

			Effect temp = new Effect(EffectTypes.Strengthen, AttributeTypes.Swords, rounds, 1);
			newChar.AddTemporaryEffect(temp);

			for(int i = 0; i < rounds; i++)
			{
				Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
				Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
				Assert.AreEqual(1, newChar.temporaryEffects[0].EffectValue);
				Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
				
				newChar.CharacterMove();
			}
			
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.temporaryEffects.Count);
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
		}

	}
}

