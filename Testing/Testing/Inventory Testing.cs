//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using System.Collections.Generic;
using AssemblyCSharp;

namespace Testing
{
	[TestFixture()]
	public class Inventory_Testing
	{
		private Character CreateNewCharacter()
		{
			List<Race> races = new List<Race>();
			races.Add(new Race(RaceTypes.Human));
			
			List<CharClass> charClasses = new List<CharClass>();
			charClasses.Add(new CharClass(CharacterClass.Warrior));
			
			Character newChar = new Character("Test Dude", Sexes.Male, races, charClasses);
			return newChar;
		}
		
		private Item CreateArmor()
		{
			List<Effect> effects = new List<Effect>();
			Armour newArmor = new Armour(ArmorClasses.Medium, WornPosition.Head, "Standard Helmet", ItemTypes.Armour, MaterialTypes.Leather, 1000, effects);
			return newArmor;
		}
		
		private Item CreateWeapon()
		{
			List<Effect> effects = new List<Effect>();
			Weapon wep = new Weapon(6, WeaponTypes.Bow, Handedness.Two, DamageTypes.Peircing, "Standard Bow", ItemTypes.Weapon, MaterialTypes.Wood, 400, effects);
			return wep;
		}
		
		private Item CreateJewellry()
		{
			List<Effect> effects = new List<Effect>();
			Jewellry jewellry = new Jewellry(JewellryTypes.Ring, "Ring", ItemTypes.Jewellry, MaterialTypes.Copper, 30, effects);
			return jewellry;
		}
		
		[Test()]
		public void CreateCharacter ()
		{
			Character newChar = CreateNewCharacter();
			Assert.IsNotNull(newChar);
			Assert.AreEqual(true, string.Equals(newChar.Name, "Test Dude"));
			Assert.AreEqual(newChar.Sex, Sexes.Male);
		}
		
		[Test()]
		public void PickUpItem ()
		{
			Character newChar = CreateNewCharacter();
			Item newItem = CreateWeapon();
			newChar.PickUpItem(newItem);
			Assert.AreEqual(((Weapon)newChar.inventory[0]).WeaponType, WeaponTypes.Bow);
		}
		
		[Test()]
		public void EquipItem ()
		{
			Character newChar = CreateNewCharacter();
			Item newItem = CreateArmor();
			newChar.PickUpItem(newItem);
			newChar.EquipItem(0);
			Assert.AreEqual(newChar.inventory.Count, 0);
			Assert.AreEqual(((Armour)newChar.equippedItems[0]).ArmourClass, ArmorClasses.Medium);
		}
		
		[Test()]
		public void UnEquipItem ()
		{
			Character newChar = CreateNewCharacter();
			Item newItem = CreateJewellry();
			newChar.PickUpItem(newItem);
			newChar.EquipItem(0);
			Assert.AreEqual(newChar.inventory.Count, 0);
			Assert.AreEqual(((Jewellry)newChar.equippedItems[0]).JewellryType, JewellryTypes.Ring);
			
			newChar.UnEquipItem(0);
			Assert.AreEqual(newChar.equippedItems.Count, 0);
			Assert.AreEqual(((Jewellry)newChar.inventory[0]).JewellryType, JewellryTypes.Ring);
		}

		[Test()]
		public void CreateItem()
		{
			List<AssemblyCSharp.Attribute> statChanges = new List<AssemblyCSharp.Attribute>();
			List<Effect> effects = new List<Effect>();
			Weapon wep = new Weapon(6, WeaponTypes.Bow, Handedness.Two, DamageTypes.Peircing, "Standard Bow", ItemTypes.Weapon, MaterialTypes.Wood, 400, effects);
			Assert.IsNotNull(wep);
			Assert.AreEqual(true, string.Equals(wep.Name, "Standard Bow"));
			Assert.AreEqual(wep.WeaponType, WeaponTypes.Bow);
			Assert.AreEqual(wep.Handed, Handedness.Two);
			Assert.AreEqual(wep.DamageType, DamageTypes.Peircing);
			Assert.AreEqual(wep.Type, ItemTypes.Weapon);
			Assert.AreEqual(wep.MaterialType, MaterialTypes.Wood);
			Assert.AreEqual(wep.Weight, 400);
		}
	}
}

