//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using System;
using System.Collections.Generic;
using AssemblyCSharp;

namespace Testing
{
	[TestFixture()]
	public class Item_Testing
	{

		private Character CreateNewCharacter()
		{
			List<Race> races = new List<Race>();
			races.Add(new Race(RaceTypes.Human));
			
			List<CharClass> charClasses = new List<CharClass>();
			charClasses.Add(new CharClass(CharacterClass.Warrior));
			
			Character newChar = new Character("Test Dude", Sexes.Male, races, charClasses);
			return newChar;
		}


		private Weapon CreateWeaponSword(EffectTypes effectType, AttributeTypes attributeTypes, int value, string name)
		{
			List<Effect> effects = new List<Effect>();

			Effect tempEffect = new Effect(effectType, attributeTypes, value);
			effects.Add(tempEffect);

			return new Weapon(6, WeaponTypes.Sword, Handedness.Single, DamageTypes.Slashing, name, ItemTypes.Weapon, MaterialTypes.Steel, 400, effects);
		}
		
		[Test()]
		public void ItemWithEffectPlusOne()
		{
			Character newChar = CreateNewCharacter();

			Weapon wep = CreateWeaponSword(EffectTypes.Strengthen, AttributeTypes.Strength, 1, "Sword of Strength");

			newChar.PickUpItem(wep);
			newChar.EquipItem(0);

			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Strength));
			Assert.AreEqual(11, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Strength));
		}

		[Test()]
		public void ItemWithEffectPlusTwo()
		{
			Character newChar = CreateNewCharacter();
			
			Weapon wep = CreateWeaponSword(EffectTypes.Strengthen, AttributeTypes.Dexterity, 2, "Sword of Dexterity");
			
			newChar.PickUpItem(wep);
			newChar.EquipItem(0);

			Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Dexterity));
			Assert.AreEqual(12, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Dexterity));
		}

		[Test()]
		// Pick up item with an ability skill level change on it.
		// Equip the item
		public void ItemWithAbilityChange1()
		{
			Character newChar = CreateNewCharacter();

			newChar.AddAttribute(new AssemblyCSharp.Attribute(AttributeTypes.Swords, 1));
			
			Weapon wep = CreateWeaponSword(EffectTypes.Strengthen, AttributeTypes.Swords, 1, "Sword of mastery");
			
			newChar.PickUpItem(wep);
			newChar.EquipItem(0);

			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
		}

		[Test()]
		// Pick up item with an ability skill level change on it.
		// Equip the item
		// UnEquip the item
		public void ItemWithAbilityChange2()
		{
			Character newChar = CreateNewCharacter();
			
			newChar.AddAttribute(new AssemblyCSharp.Attribute(AttributeTypes.Swords, 1));
			
			Weapon wep = CreateWeaponSword(EffectTypes.Strengthen, AttributeTypes.Swords, 1, "Sword of mastery");
			
			newChar.PickUpItem(wep);
			newChar.EquipItem(0);
			
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(2, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));

			newChar.UnEquipItem(0);
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.baseAttributes, AttributeTypes.Swords));
			Assert.AreEqual(0, newChar.FindAttributeLevel(newChar.addedAttributes, AttributeTypes.Swords));
			Assert.AreEqual(1, newChar.FindAttributeLevel(newChar.totalAttributes, AttributeTypes.Swords));
		}

	}
}

